# ------------------------------------------------------------------------------
# Copyright (C) 2016-2017 DELL EMC Corporation. All Rights Reserved.

# This software contains the intellectual property of DELL EMC Corporation
# or is licensed to DELL EMC Corporation from third parties.  Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of DELL  EMC.

# ------------------------------------------------------------------------------

---
# Playbook file: createWindowsTemplate.yml
-
    name: '{{ step }} - Create Windows Server Template and Validate'
    hosts: '{{ vms }}'
    any_errors_fatal: true
    vars:
      vmname: "ehc-windows-test-vm"
    tasks:
        -
            name: '{{ step }} - Create Windows Server Template using ISO image'
            tags:
                - '{{ step }} - Create Windows Server Template using ISO image'
            delegate_to: localhost
            run_once: true
            ehc_script_agent:
                package_name: common
                module_name: IWinTemplateManagement
                method_name: invokeWinTemplateCreation
                method_params:
                    vCenterDict: '{{ vcenter }}'
                    templateDict: '{{ templateDict }}'
                    answerFileDict: '{{ answerFileDict }}'
                    templateVMPassword: '{{  windows.default_password  }}'
                    vmConfDict: '{{templateVmConfDict}}'
            register: createWindowsTemplateResults
            # TODO: If Template already exists set as success
            failed_when: createWindowsTemplateResults.data.err_message is defined and "already exists" not in createWindowsTemplateResults.data.err_message
            changed_when: createWindowsTemplateResults.data.err_message is not defined or "already exists" in createWindowsTemplateResults.data.err_message

        -
            name: '{{ step  }} - Deploy a test VM from the template'
            tags:
                - '{{ step  }} - Deploy a test VM from the template'
            delegate_to: localhost
            run_once: true
            ehc_script_agent: '{{ deploy_args }}'
            register: deployWindowsFromTemplateResults
            failed_when: deployWindowsFromTemplateResults.data is not defined or deployWindowsFromTemplateResults.data.err_message is defined or deployWindowsFromTemplateResults.data[vmname] is not defined or not deployWindowsFromTemplateResults.data[vmname].success
            changed_when: deployWindowsFromTemplateResults.data is defined and deployWindowsFromTemplateResults.data.err_message is not defined  and deployWindowsFromTemplateResults.data[vmname] is defined and deployWindowsFromTemplateResults.data[vmname].success

        -
            name: '{{ step  }} - Validate Windows Server Deployed from Template'
            tags:
                - '{{ step  }} - test Validate Windows Server Deployed from Template'
            delegate_to: localhost
            run_once: true
            ehc_script_agent:
                package_name: common
                module_name: validateWindows
                method_name: validateWindowsServer
                method_params:
                    vCenterDict: '{{ vcenter }}'
                    vMDict:  '{{ vmDict }}'
                    vmConfDict: '{{ validateTemplateVmConfDict }}'
            register: validateWindowsTemplateResults
            failed_when: validateWindowsTemplateResults.data is not defined or validateWindowsTemplateResults.data.err_message is defined or false in validateWindowsTemplateResults|json_query('data.*.status')
            changed_when: validateWindowsTemplateResults.data is defined and validateWindowsTemplateResults.data.err_message is not defined and false not in validateWindowsTemplateResults|json_query('data.*.status')

        -
            name: '{{ step  }} - Delete Virtual Machines'
            tags:
                - '{{ step  }} - Delete Virtual Machines'
            delegate_to: localhost
            run_once: true
            ehc_script_agent:
                package_name: common
                module_name: vmUtils
                method_name: deleteVm
                method_params:
                    vcenterDict: '{{ vcenter }}'
                    vmName: '{{vmname}}'
                    datacenter: '{{ vcenter_datacenter }}'
                    # Is a folder Path required
                    folderPath: '{{ deployed_vms_folderPath }}'
            register: deleteVMResults
            failed_when: deleteVMResults.data is not defined or deleteVMResults.data.err_message is defined or not deleteVMResults.data.status == true
            changed_when: deleteVMResults.data is defined and deleteVMResults.data.err_message is not defined and deleteVMResults.data.status == true
