# ------------------------------------------------------------------------------
# Copyright (C) 2016-2017 DELL EMC Corporation. All Rights Reserved.

# This software contains the intellectual property of DELL EMC Corporation
# or is licensed to DELL EMC Corporation from third parties.  Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of DELL  EMC.

# ------------------------------------------------------------------------------

-
    name: '{{ step }} - Import and Validate SSL certs to vRO'
    hosts: '{{ vms }}'
    gather_facts: no
    any_errors_fatal: True
    vars:
      vmConfiguration:
          vmName: '{{ vmname }}'
          host: '{{ ansible_host }}'
          vmUsername: '{{ vro_vm_username }}'
          vcoPassword: '{{ vrealize_orchestrator.vro_root_password }}'
    tags:
          - '{{ step }} - Import SSL certs to vRO'
    tasks:
        -
            name: '{{ step }} - Validate Import of SSL certs to vRO'
            delegate_to: localhost
            ehc_script_agent:
                package_name: vro
                module_name: vroConfig
                method_name: validateImportVROSSLCertificate
                method_params:
                    vmConfiguration: '{{ vmConfiguration }}'
                    commonNames: '{{ ssl_certs_import_validation_names }}'
            register: validateSSLCertsResults
            failed_when: not validateSSLCertsResults.data is defined or validateSSLCertsResults.data.err_message is defined or validateSSLCertsResults|json_query('data.* | contains(@, `false`)')
            changed_when: validateSSLCertsResults.data is defined and not validateSSLCertsResults.data.err_message is defined and not validateSSLCertsResults|json_query('data.* | contains(@, `false`)')
            ignore_errors: validateSSLCertsResults.failed_when_result

        -
            name: '{{ step }} - Import SSL certs to vROs'
            delegate_to: localhost
            ehc_script_agent:
                module_name: vroConfig
                package_name: vro
                method_name: importVROSSLCertificate
                method_params:
                    vmConfiguration: '{{ vmConfiguration }}'
                    urls: '{{ ssl_certs_import_urls }}'
            register: importVROSSLCertResults
            failed_when: not importVROSSLCertResults.data is defined or importVROSSLCertResults.data.err_message is defined or importVROSSLCertResults|json_query('data.* | [?statusCode!=`200`]')
            changed_when: importVROSSLCertResults.data is defined and not importVROSSLCertResults.data.err_message is defined and not importVROSSLCertResults|json_query('data.* | [?statusCode!=`200`]')
            when: validateSSLCertsResults.failed_when_result

        -
            name: '{{ step }} - Post Validate Import of SSL certs to vRO'
            delegate_to: localhost
            ehc_script_agent:
                package_name: vro
                module_name: vroConfig
                method_name: validateImportVROSSLCertificate
                method_params:
                    vmConfiguration: '{{ vmConfiguration }}'
                    commonNames: '{{ ssl_certs_import_validation_names }}'
            register: postValidateSSLCertResults
            failed_when: not postValidateSSLCertResults.data is defined or postValidateSSLCertResults.data.err_message is defined or postValidateSSLCertResults|json_query('data.* | contains(@, `false`)')
            changed_when: postValidateSSLCertResults.data is defined and not postValidateSSLCertResults.data.err_message is defined and not postValidateSSLCertResults|json_query('data.* | contains(@, `false`)')
            when: not importVROSSLCertResults|skipped