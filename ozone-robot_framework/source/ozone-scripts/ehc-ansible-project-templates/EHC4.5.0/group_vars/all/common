# ------------------------------------------------------------------------------
# Copyright (C) 2016-2017 DELL EMC Corporation. All Rights Reserved.

# This software contains the intellectual property of DELL EMC Corporation
# or is licensed to DELL EMC Corporation from third parties.  Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of DELL  EMC.

# ------------------------------------------------------------------------------

# Format of VM Name for all components. Set to first part of FQDN
# vmname: '{{ ansible_host.split(".")[0] }}'

# Get vmname from input. The name of the host in inventory file should be same as the the one in input file
vmname: '{{ inventory_hostname in host_address and host_address[inventory_hostname].vmname or "localhost" }}'
ansible_host: '{{ inventory_hostname in host_address and host_address[inventory_hostname].fqdn or "localhost" }}'
ansible_host_ip: '{{ inventory_hostname in host_address and host_address[inventory_hostname].ip or "127.0.0.1" }}'

ad_domain: '{{ common.domain }}'
ad_domain_name: '{{ common.domain.split(".")[0] }}'
ad_domain_name_with_backslash: '{{ common.domain.split(".")[0]}}\'

ad_domain_port: '{{ active_directory.port | int}}'

ntp_servers: '{{ common.ntp_servers_comma_separated.split(",") }}'

vm_type_linux: 0
vm_type_windows: 1

# Global setting for all application poll functions - vro, nsx, vra, iaas servers
poll_retries: 60
# Delay in seconds
poll_delay: 20

# Time to wait for VM deployment to complete before timing out (in seconds)
timeout_for_vm_deploy: 3600

win_timezone: '{{ windows.timezone }}'
linux_timezone: '{{ windows_linux_timezone_map[windows.timezone] }}'

vrealize_vm_flavor: 'suse'
vrealize_vm_os_version: 'version-11'

sizing_info: '{{ sizing[inventory_hostname] | default(None) }}'

sql_server_fqdn: '{{  host_address.sql_server.fqdn }}'
# TODO: Check if this should be user configurable.
sql_server_port: '1433'

# Prepare ESXi host dictionaries by combining base esxi_host information such as username, password, ntp servers etc into a list of esxi servers
vcenter_esxi_hosts: '{{ vcenter_details.esxi_hosts | combine_list_dict(vcenter_details.esxi_host |combine ({"username": "root"}) ) }}'

local_manifest_path: '{{ inventory_dir | dirname }}/repository-manifest.json'
sw_repository_manifest: '{{ (lookup("file", local_manifest_path) | from_json).repository }}'

vcenter_details_sso_domain_name: 'vsphere.local'

# vCenter details - user and username are required as scripts expect different keys in different places
# This single dictionary can be used as vCenter Dictionary in all calls.
vcenter:
    vCenterHost: '{{ host_address.vcenter_server.ip }}'
    host: '{{ host_address.vcenter_server.ip }}'
    ip: '{{ host_address.vcenter_server.ip }}'
    fqdn: '{{ host_address.vcenter_server.fqdn }}'
    port: 443
    portNum: 443
    user: '{{ vcenter_details.sso_domain.username }}@{{ vcenter_details_sso_domain_name }}'
    username: '{{ vcenter_details.sso_domain.username }}@{{ vcenter_details_sso_domain_name }}'
    userName: '{{ vcenter_details.sso_domain.username }}@{{ vcenter_details_sso_domain_name }}'
    password: '{{ vcenter_details.sso_domain.password }}'
    vmusername: 'root'
    vmpassword: '{{ vcenter_details.vcenter_server.root_password }}'
    description: 'vCenter'
    name: 'vCenter'
    vmname: '{{ host_address.vcenter_server.vmname }}'
    guestOSType: '{{ vm_type_linux }}'
    ostype: '{{ vm_type_linux }}'
    guestOSFlavor: 'suse'
    guestOSVersion: 'version-11'

psc01Dict:
    host: '{{ host_address.psc01.fqdn }}'
    fqdn: '{{ host_address.psc01.fqdn }}'
    ip: '{{ host_address.psc01.ip }}'
    user: '{{ vcenter_details.sso_domain.username }}@{{ vcenter_details_sso_domain_name }}'
    port: 443
    username: '{{ vcenter_details.sso_domain.username }}@{{ vcenter_details_sso_domain_name }}'
    password: '{{ vcenter_details.sso_domain.password }}'
    vmname:   '{{ host_address.psc01.vmname }}'

psc02Dict:
    host: '{{ host_address.psc02.ip }}'
    ip: '{{ host_address.psc02.ip }}'
    fqdn: '{{ host_address.psc02.fqdn }}'
    user: '{{ vcenter.username }}@{{ vcenter_details_sso_domain_name }}'
    port: 443
    username: '{{ vcenter_details.sso_domain.username }}@{{ vcenter_details_sso_domain_name }}'
    password: '{{ vcenter_details.sso_domain.password }}'
    vmname:   '{{ host_address.psc02.vmname }}'

# First ESXi Host used to deploy PSCs
first_esxi_host:
    host: '{{ vcenter_esxi_hosts.0.hostName }}'
    fqdn: '{{ vcenter_esxi_hosts.0.hostName }}'
    user: '{{ vcenter_esxi_hosts.0.username }}'
    username: '{{ vcenter_esxi_hosts.0.username }}'
    password: '{{ vcenter_esxi_hosts.0.password }}'


#vcenter_network: '{{ vcenter_details.network }}'
vcenter_network: '{{ inventory_hostname in host_address and host_address[inventory_hostname].portgroup or "" }}'
vcenter_datastore: '{{ vcenter_details.datastore }}'

vcenter_cluster:   '{{ vcenter_details.cluster }}'
vcenter_datacenter:   '{{ vcenter_details.datacenter }}'

vcenter_ovadeployhost:  '{{ common.external_vcenter_ovadeployhost|default(None) or vcenter_details.ovadeployhost}}'

vcenter_folderPath: '{{ vcenter_details.folderpath }}'
deployed_vms_folderPath: ''

sql_server:
    host: '{{ host_address.sql_server.ip }}'

# EHCInstall Master node dictionary. Used to download logs from VM and store in datastore.
master_vm_dict:
    vmname: EHCAuto-Master
    vmusername: root
    vmpassword: '{{ ehcauto_master_vm.password }}'
    datacenter: '{{ vcenter_datacenter }}'
    folderpath: '/EHC-Automation-Tool/'

worker_vm_dict:
    ip: '{{ ehcauto_worker_vm.ip }}'
    vmname: EHCAuto-Worker
    vmusername: administrator
    vmpassword: '{{ ehcauto_worker_vm.password }}'

# FTP Server for NSX Backups - Must be local
ftp_server:
    host: '{{ worker_vm_dict.ip }}'
    # Default Windows Worker VM Administrator username and password
    username: administrator
    password: '{{ worker_vm_dict.vmpassword }}'

software_repository_manifest_path: 'C:/EHC-Software/EHC/manifests/software_repository_manifest.json'
scripts_repository_path: 'C:/EHC-Software/EHC/autodeploy/buildAutomation/source'

# Used during the creation of windows template
windows_template_dependency_dir_path: 'C:/EHC-Software/dependencies/templates/win2k12R2'


# Path to directory on orchestrator(linux) VM to download logs
orch_vm_data_path: '/home/administrator/docker_data/log'

resource_pools:
  core: Core
  nei: NEI
  auto: Automation
  tenant: Tenant

# Database names
databases:
  ehc_om_database: EHCOM
  vro_database: vro
  vra_database: vra