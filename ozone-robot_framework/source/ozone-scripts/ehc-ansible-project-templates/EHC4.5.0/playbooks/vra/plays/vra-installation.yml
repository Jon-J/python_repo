# ------------------------------------------------------------------------------
# Copyright (C) 2016-2017 DELL EMC Corporation. All Rights Reserved.

# This software contains the intellectual property of DELL EMC Corporation
# or is licensed to DELL EMC Corporation from third parties.  Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of DELL  EMC.

# ------------------------------------------------------------------------------


-
    name: 'VRA - {{ step }} - IaaS Windows VM setup'
    hosts: vra_iaas_servers
    vars:
        step: 'EPB-450-051'
    gather_facts: no
    any_errors_fatal: True
    tags:
                - 'VRA - {{ step }} - IaaS Windows VM setup'
    tasks:
        -
            name: 'VRA - {{ step }} - Validate IaaS Windows VM setup'
            delegate_to: localhost
            ehc_script_agent:
                package_name: vra
                module_name: iaasVMSetup
                method_name: validateIaasVMSetup
                method_params:
                    vCenterDataDict: '{{ vcenter }}'
                    vmDetails:
                        -   '{{ vmDict }}'
                    serviceAccount: '{{ ad_domain_name }}\{{ ad_user.svc_iaas.username }}'
            register: iaasWindowsVMValidateResult
            failed_when: not iaasWindowsVMValidateResult['data'][vmname] is defined or not iaasWindowsVMValidateResult['data'][vmname]['SeBatchLogonRight'] or not iaasWindowsVMValidateResult['data'][vmname]['SeServiceLogonRight'] or not iaasWindowsVMValidateResult['data'][vmname]['localAdminAdded']
            changed_when: iaasWindowsVMValidateResult['data'][vmname] is defined and iaasWindowsVMValidateResult['data'][vmname]['SeBatchLogonRight'] and iaasWindowsVMValidateResult['data'][vmname]['SeServiceLogonRight'] and iaasWindowsVMValidateResult['data'][vmname]['localAdminAdded']
            ignore_errors: iaasWindowsVMValidateResult.failed_when_result

        -
            name: 'VRA - {{ step }} - IaaS Windows VM setup'
            delegate_to: localhost
            ehc_script_agent:
                package_name: vra
                module_name: iaasVMSetup
                method_name: iaasVMSetup
                method_params:
                    vCenterDataDict: '{{ vcenter }}'
                    vmDetails:
                        -   '{{ vmDict }}'
                    serviceAccount: '{{ad_user.svc_iaas.username}}'
                    domain: '{{ ad_domain }}'
                    sqlServer:
                        host: '{{ host_address.sql_server.fqdn }}'
                        user: '{{ad_user.svc_iaas.username}}'
                        password: '{{ad_user.svc_iaas.password}}'
                        database: 'tempdb'
            register: iaasWindowsVMSetupResult
            failed_when: not iaasWindowsVMSetupResult['data'][vmname] is defined or not iaasWindowsVMSetupResult['data']['sqlLogin'] or not iaasWindowsVMSetupResult['data']['sqlLogin'] or not iaasWindowsVMSetupResult['data'][vmname]['SeBatchLogonRight'] or not iaasWindowsVMSetupResult['data'][vmname]['onDomain'] or not iaasWindowsVMSetupResult['data'][vmname]['SeServiceLogonRight'] or not iaasWindowsVMSetupResult['data'][vmname]['localAdminAdded']
            changed_when: iaasWindowsVMSetupResult['data'][vmname] is defined and iaasWindowsVMSetupResult['data']['sqlLogin'] is defined and iaasWindowsVMSetupResult['data']['sqlLogin'] and iaasWindowsVMSetupResult['data'][vmname]['SeBatchLogonRight'] and iaasWindowsVMSetupResult['data'][vmname]['onDomain'] and iaasWindowsVMSetupResult['data'][vmname]['SeServiceLogonRight'] and iaasWindowsVMSetupResult['data'][vmname]['localAdminAdded']
            when: iaasWindowsVMValidateResult.failed_when_result
            ignore_errors: True

        -
            name: 'VRA - {{ step }} - Post-Validate IaaS Windows VM setup'
            delegate_to: localhost
            ehc_script_agent:
                package_name: vra
                module_name: iaasVMSetup
                method_name: validateIaasVMSetup
                method_params:
                    vCenterDataDict: '{{ vcenter }}'
                    vmDetails:
                        -   '{{ vmDict }}'
                    serviceAccount: '{{ ad_domain_name }}\{{ad_user.svc_iaas.username}}'
            register: result
            failed_when: not result['data'][vmname] is defined or not result['data'][vmname]['SeBatchLogonRight'] or not result['data'][vmname]['SeServiceLogonRight'] or not result['data'][vmname]['localAdminAdded']
            changed_when: result['data'][vmname] is defined and result['data'][vmname]['SeBatchLogonRight'] and result['data'][vmname]['SeServiceLogonRight'] and result['data'][vmname]['localAdminAdded']
            when: not iaasWindowsVMSetupResult|skipped


-
    name: 'VRA - {{ step }} - IaaS Agent Installation'
    hosts: vra_iaas_servers
    gather_facts: no
    any_errors_fatal: True
    vars:
      step: 'EPB-450-060'
    tags:
                - 'VRA - {{ step }} - IaaS Agent Installation'
    tasks:
        -
            name: 'VRA - {{ step }} - Validate IaaS Agent Installation'
            delegate_to: localhost
            ehc_script_agent:
                method_name: validateIaasAgent
                module_name: installIaasAgent
                package_name: vra
                method_params:
                    vCenterDict:  '{{ vcenter }}'
                    #vMDict: '{{ vmDict | combine(iaasCredentials) }}'
                    vMDict: '{{ vmDict  }}'
                    hostName: '{{ host_address.vra_primary.fqdn }}'
            register: iaasPreValidationResult
            failed_when: not iaasPreValidationResult.data is defined or iaasPreValidationResult.data.err_message is defined or not iaasPreValidationResult.data.status is defined or iaasPreValidationResult.data.status != true
            changed_when: iaasPreValidationResult.data is defined and not iaasPreValidationResult.data.err_message is defined and iaasPreValidationResult.data.status is defined and iaasPreValidationResult.data.status == true
            ignore_errors: iaasPreValidationResult.failed_when_result

        -
            name: 'VRA - {{ step }} - IaaS Agent Installation'
            delegate_to: localhost
            ehc_script_agent:
                method_name: installIaasAgent
                module_name: installIaasAgent
                package_name: vra
                method_params:
                    vCenterDict: '{{ vcenter }}'
                    vMDict: '{{ vmDict | combine(iaasCredentials) }}'
                    # vMDict: '{{ vmDict }}'
                    agentInfoDict:
                        hostName: '{{ host_address.vra_primary.fqdn }}'
                        vraUserName: root
                        vraPassword: '{{ vrealize_automation.vra_root_password }}'
                        #iaasServiceUserName: '{{ vmDict.username }}'
                        #iaasServicePassword: '{{ vmDict.password }}'
                        iaasServiceUserName: '{{ svc_iaas_username_with_domain }}'
                        iaasServicePassword: '{{ ad_user.svc_iaas.password }}'
            register: iaasAgentInstallationResult
            failed_when: not iaasAgentInstallationResult.data is defined or iaasAgentInstallationResult.data.err_message is defined or iaasAgentInstallationResult.data.status != "installed"
            changed_when: iaasAgentInstallationResult.data is defined and not iaasAgentInstallationResult.data.err_message is defined and iaasAgentInstallationResult.data.status == "installed"
            when: iaasPreValidationResult.failed_when_result
            retries: 2
            delay: 10
            until: iaasAgentInstallationResult.data is defined and not iaasAgentInstallationResult.data.err_message is defined and iaasAgentInstallationResult.data.status == "installed"

        -
            name: 'VRA - {{ step }} - Post-Validate IaaS Agent Installation'
            delegate_to: localhost
            ehc_script_agent:
                method_name: validateIaasAgent
                module_name: installIaasAgent
                package_name: vra
                method_params:
                    vCenterDict: '{{ vcenter }}'
                    #vMDict: '{{ vmDict | combine(iaasCredentials) }}'
                    vMDict: '{{ vmDict }}'
                    hostName: '{{host_address.vra_primary.fqdn}}'
            register: result
            failed_when: not result.data is defined or result.data.err_message is defined or not result.data.status is defined or result.data.status != true
            changed_when: result.data is defined and not result.data.err_message is defined and result.data.status is defined and result.data.status == true
            when: not iaasAgentInstallationResult|skipped

-
    name: 'VRA - {{ step }} - vRA Installation Wizard'
    hosts: vra_primary
    gather_facts: no
    vars:
        step: 'EPB-450-070'
    tags:
                - 'VRA - {{ step }} - vRA Installation Wizard'
    tasks:
        -
            name: 'VRA - {{ step }} - Validate vRA Installation Wizard'
            tags:
                - 'VRA - {{ step }} - Validate vRA Installation Wizard'
            delegate_to: localhost
            ehc_script_agent:
                package_name: vra
                module_name: vraInstallation
                method_name: validateVRAInstallaionWizard
                method_params:
                    vCenterDict: '{{ vcenter }}'
                    vmDict:
                        vmname: '{{ vmname }}'
                        vmusername: 'root'
                        vmpassword: '{{ vrealize_automation.vra_root_password }}'
                    installationInfo: '{{ installationInfo }}'
            register: preValidateVraInstallationResults
            failed_when: preValidateVraInstallationResults.data is not defined or preValidateVraInstallationResults.data.err_message is defined or preValidateVraInstallationResults.data.status == false
            changed_when: preValidateVraInstallationResults.data is defined and not preValidateVraInstallationResults.data.err_message is defined and preValidateVraInstallationResults.data.status == true
            ignore_errors: preValidateVraInstallationResults.failed_when_result

        -
            name: 'VRA - {{ step }} - vRA Installation Wizard'
            delegate_to: localhost
            ehc_script_agent:
                method_name: vraInstallaionWizard
                method_params:
                    vCenterDict: '{{ vcenter }}'
                    vmDict:
                        vmname: '{{ vmname }}'
                        vmusername: 'root'
                        vmpassword: '{{ vrealize_automation.vra_root_password }}'
                    installationInfo: '{{ installationInfo }}'
                module_name: vraInstallation
                package_name: vra
            register: vraInstallationResults
            failed_when: not vraInstallationResults.data is defined or vraInstallationResults.data.err_message is defined or vraInstallationResults.data.status == false
            changed_when: vraInstallationResults.data is defined and not vraInstallationResults.data.err_message is defined and vraInstallationResults.data.status == true
            # Adding 1 retries as it fails first time due to pre-requisites not complete
            # TODO Change this if required
            # retries: 1
            # Do not use vraInstallationResults.changed as changed doesnt get evaluated during until evaluation
            # until: vraInstallationResults.data is defined and not vraInstallationResults.data.err_message is defined and vraInstallationResults.data.status == true
            when: preValidateVraInstallationResults.failed_when_result

        -
            name: 'VRA - {{ step }} - Post-Validate vRA Installation Wizard'
            delegate_to: localhost
            ehc_script_agent:
                package_name: vra
                module_name: vraInstallation
                method_name: validateVRAInstallaionWizard
                method_params:
                    vCenterDict: '{{ vcenter }}'
                    vmDict:
                        vmname: '{{ vmname }}'
                        vmusername: 'root'
                        vmpassword: '{{ vrealize_automation.vra_root_password }}'
                    installationInfo: '{{ installationInfo }}'
            register: validateVraInstallationResults
            failed_when: not validateVraInstallationResults.data is defined or validateVraInstallationResults.data.err_message is defined or validateVraInstallationResults.data.status == false or validateVraInstallationResults.data.validationInfo.overallStatus == false
            changed_when: validateVraInstallationResults.data is defined and not validateVraInstallationResults.data.err_message is defined and validateVraInstallationResults.data.status == true and validateVraInstallationResults.data.validationInfo.overallStatus == true
            when: not vraInstallationResults|skipped
            until: validateVraInstallationResults.data is defined and not validateVraInstallationResults.data.err_message is defined and validateVraInstallationResults.data.status == true and validateVraInstallationResults.data.validationInfo.overallStatus == true
            retries: 6
            delay: 30
            # TODO: Check validation script and
            # ignore_errors: True