# ------------------------------------------------------------------------------
# Copyright (C) 2016-2017 DELL EMC Corporation. All Rights Reserved.

# This software contains the intellectual property of DELL EMC Corporation
# or is licensed to DELL EMC Corporation from third parties.  Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of DELL  EMC.

# ------------------------------------------------------------------------------

---

# This is not required in VxRail as per Sean Leahy
#-
#    name: 'VRA - {{ step }} - Add user entitlement to storage services'
#    hosts: vra_primary
#    gather_facts: no
#    any_errors_fatal: True
#    vars:
#        step: 'EPB-750-020'
#    tasks:
#        -
#            name: 'VRA - {{ step }} - Validate Add user entitlement to storage services'
#            tags:
#                - 'VRA - {{ step }} - Validate Add user entitlement to storage services'
#                - 'VRA - {{ step }} - Add user entitlement to storage services'
#            delegate_to: localhost
#            ehc_script_agent:
#                package_name: vra
#                module_name: vraConfig
#                method_name: validateUserEntitlementToSevices
#                method_params:
#                    vraCred:
#                        vra: '{{ host_address.vra_load_balancer.fqdn }}'
#                        username: "{{ ad_user.ehc_tenant_admin.username }}@{{ ad_domain }}"
#                        password: "{{ ad_user.ehc_tenant_admin.password }}"
#                        tenantname: '{{ firstTenant.tenantname }}'
#                    entitlementDict: '{{ entitlementDict }}'
#            register: validateUserEntitlementToSevicesResults
#            failed_when: not validateUserEntitlementToSevicesResults.data is defined or validateUserEntitlementToSevicesResults.data.err_message is defined or validateUserEntitlementToSevicesResults.data.FinalStatus == false
#            changed_when: validateUserEntitlementToSevicesResults.data is defined and not validateUserEntitlementToSevicesResults.data.err_message is defined and validateUserEntitlementToSevicesResults.data.FinalStatus == true
#            ignore_errors: validateUserEntitlementToSevicesResults.failed_when_result
#
#        -
#            name: 'VRA - {{ step }} - Add user entitlement to storage services'
#            tags:
#                - 'VRA - {{ step }} - Add user entitlement to storage services'
#            delegate_to: localhost
#            ehc_script_agent:
#                package_name: vra
#                module_name: vraConfig
#                method_name: addUserEntitlemenToStorageServices
#                method_params:
#                    vraCred:
#                        vra: '{{ host_address.vra_load_balancer.fqdn }}'
#                        username: "{{ ad_user.ehc_tenant_admin.username }}@{{ ad_domain }}"
#                        password: "{{ ad_user.ehc_tenant_admin.password }}"
#                        tenantname: '{{ firstTenant.tenantname }}'
#                    entitlementDict: '{{ entitlementDict }}'
#            register: addUserEntitlemenToStorageServicesResults
#            failed_when: not addUserEntitlemenToStorageServicesResults.data is defined or addUserEntitlemenToStorageServicesResults.data.err_message is defined or addUserEntitlemenToStorageServicesResults.data == false
#            changed_when: addUserEntitlemenToStorageServicesResults.data is defined and not addUserEntitlemenToStorageServicesResults.data.err_message is defined and addUserEntitlemenToStorageServicesResults.data == true
#            when: validateUserEntitlementToSevicesResults.failed_when_result
#
#        -
#            name: 'VRA - {{ step }} - Post Validate Add user entitlement to storage services'
#            tags:
#                - 'VRA - {{ step }} - Add user entitlement to storage services'
#            delegate_to: localhost
#            ehc_script_agent:
#                package_name: vra
#                module_name: vraConfig
#                method_name: validateUserEntitlementToSevices
#                method_params:
#                    vraCred:
#                        vra: '{{ host_address.vra_load_balancer.fqdn }}'
#                        username: "{{ ad_user.ehc_tenant_admin.username }}@{{ ad_domain }}"
#                        password: "{{ ad_user.ehc_tenant_admin.password }}"
#                        tenantname: '{{ firstTenant.tenantname }}'
#                    entitlementDict: '{{ entitlementDict }}'
#            register: postvalidateUserEntitlementToSevicesResults
#            failed_when: not postvalidateUserEntitlementToSevicesResults.data is defined or postvalidateUserEntitlementToSevicesResults.data.err_message is defined or postvalidateUserEntitlementToSevicesResults.data.FinalStatus == false
#            changed_when: postvalidateUserEntitlementToSevicesResults.data is defined and not postvalidateUserEntitlementToSevicesResults.data.err_message is defined and postvalidateUserEntitlementToSevicesResults.data.FinalStatus == true
#            when: not addUserEntitlemenToStorageServicesResults|skipped

-
    name: 'VRA - {{ step }} - Apply EHC Branding'
    hosts: vra_primary
    gather_facts: no
    any_errors_fatal: True
    vars:
        step: 'EPB-750-010'
    tasks:
        -
            name: 'VRA - {{ step }} - Apply EHC Branding'
            tags:
                - 'VRA - {{ step }} - Apply EHC Branding'
            delegate_to: localhost
            ehc_script_agent:
                package_name: vra
                module_name: ehcBranding
                method_name: runEHCBrandingWorkflow
                method_params:
                    workflowInfo:
                        workflowID: '{{ ehcBranding.workflowID }}'
                        workflowName: '{{ ehcBranding.workflowName }}'
                    vROInfo: '{{ vroWorkflowInfo }}'
                    workflowData: '{{ ehcBranding.workflowData }}'
            register: ehcBrandingResults
            failed_when: not ehcBrandingResults.data is defined or ehcBrandingResults.data.err_message is defined or ehcBrandingResults.data.status == false
            changed_when: ehcBrandingResults.data is defined and not ehcBrandingResults.data.err_message is defined and ehcBrandingResults.data.status == true

