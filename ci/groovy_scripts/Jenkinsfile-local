void runStages(String tag) {
    
    docker.image(tag).inside("--privileged=true --user root") {

                def taglist = sh script: 'git tag', returnStdout: true

                String[] splitData = taglist.split("\n");
                for (String eachSplit : splitData) {
                    if (eachSplit.startsWith("v")) {
                            lasttag = eachSplit.substring(1);
                        }
                }

                def lastbuild = Jenkins.instance.getItemByFullName("${env.JOB_BASE_NAME}").getLastSuccessfulBuild().toString()

                def lastbuildnumber = lastbuild.substring(lastbuild.indexOf('#') + 1)

                int newbuildnumber = lastbuildnumber.toInteger() + 1

                def ver = lasttag + "." + newbuildnumber
	

				stage('Git Clone') {

					sh 'git config --global http.proxy https://10.131.236.9:3128/'
					
					sh 'rm -fR enterprise-cloud-connector'
					
					withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'CREDENTIALS_ID_GIT',
									  usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
					
						sh '''git clone http://$USERNAME:$PASSWORD@github.com/virtustream/enterprise-cloud-connector.git'''
					
					}

				}
				
				stage('Copy the POM file'){

					sh '''
						dir=$(pwd)
						cd $dir/enterprise-cloud-connector/virtustream-vro-plugin
						sed -i s/172.17.61.100:8281/10.100.26.80:443/g pom.xml			
					'''						
				}
				


				stage('Generate Maven Build'){
				
				withSonarQubeEnv('sonarQube') {
	
					sh '''
					dir=$(pwd)
					mvn package -f $dir/enterprise-cloud-connector/virtustream-vro-plugin/pom.xml -e -B sonar:sonar -Dmaven.wagon.http.ssl.insecure=true -Dmaven.wagon.http.ssl.allowall=true -Dmaven.wagon.http.ssl.ignore.validity.dates=true -DskipTests=true -Dbuild.number=1 -DproxyHost=10.131.236.9 -DproxyPort=3128 -DproxySet=true -Dsonar.analysis.mode=preview -Dsonar.issuesReport.html.enable=true  -Dsonar.login=eb8775c7587f31b06f1aa0af10c032dffa559f16 -Dsonar.host.url=http://10.100.26.124:9000/sonar -Dsonar.analysis.mode=publish	
					'''
				}
				}
				stage("Quality Gate") {
				 
				  timeout(time: 1, unit: 'HOURS') { // Just in case something goes wrong, pipeline will be killed after a timeout
				    def qg = waitForQualityGate() // Reuse taskId previously collected by withSonarQubeEnv
				    if (qg.status != 'OK') {
				      error "Pipeline aborted due to quality gate failure: ${qg.status}"
				    
				  }
				  }
				}
				
				
				
		}
	}
	
node{

	imageTag = "vijaymaddukuri/maven:latest"
	runStages(imageTag)
  
}
